LMml(fit1)
require(devtools)
install_github
install_github("vankesteren/blim")
require(devtools)
install_github("vankesteren/blim")
require(blim)
rm(dic)
rm(DIC)
rm(list = ls())
library(MASS)
?birthwt
blim(bwt~smoke,birthwt, mtsprior = T)
blim(bwt~0+smoke+ht+ui, birthwt, iter = 99999,
prior_b = c("dnorm(2946.89039039039,388400.532757457)",
"dnorm(2946.89039039039,388400.532757457)",
"dnorm(2946.89039039039,388400.532757457)"),
method = "rmhs", dtuning = T)
m1 <- blim(bwt~0+smoke+ht+ui, birthwt, iter = 99999,
prior_b = c("dnorm(2946.89039039039,388400.532757457)",
"dnorm(2946.89039039039,388400.532757457)",
"dnorm(2946.89039039039,388400.532757457)"),
method = "rmhs", dtuning = T)
m2 <- blim(bwt~0+smoke+ht+ui+age, birthwt, iter = 99999,
prior_b = c("dnorm(2946.89039039039,388400.532757457)",
"dnorm(2946.89039039039,388400.532757457)",
"dnorm(2946.89039039039,388400.532757457)",
"dcauchy(0,100)"),
method = "rmhs", dtuning = T)
aha <- numeric(20)
for (i in 1:20){
fit <- blim(dist~speed+I(speed^2), cars)
aha[i]<-LMml(fit)
}
plot(aha)
for (j in 1:10){
aha <- numeric(20)
for (i in 1:20){
fit <- blim(dist~speed+I(speed^2), cars, iter = 999*j)
aha[i]<-LMml(fit)
}
joepie[j]<- var(aha)
}
joepie <- numeric(10)
joepie <- numeric(10)
for (j in 1:10){
aha <- numeric(20)
for (i in 1:20){
fit <- blim(dist~speed+I(speed^2), cars, iter = 999*j)
aha[i]<-LMml(fit)
}
joepie[j]<- var(aha)
}
plot(joepie, ylab = "variance of marginal likelihood", xlab = "iterations (x999)")
joepie <- numeric(20)
for (j in 1:20){
aha <- numeric(20)
for (i in 1:20){
fit <- blim(dist~speed+I(speed^2), cars, iter = 999*j)
aha[i]<-LMml(fit)
}
joepie[j]<- var(aha)
}
plot(joepie, ylab = "variance of marginal likelihood", xlab = "iterations (x999)")
aha <- numeric(20)
for (i in 1:20){
fit <- blim(dist~speed+I(speed^2), cars, iter = 999999)
aha[i]<-LMml(fit)
}
plot(aha)
joepie <- numeric(20)
for (j in 1:20){
aha <- numeric(20)
for (i in 1:20){
fit <- blim(dist~speed+I(speed^2), cars, iter = 999*j)
fit2 <- blim(dist~speed, cars, iter = 999*j)
aha[i]<-exp(LMml(fit2)-LMml(fit))
}
joepie[j]<- var(aha)
}
plot(joepie, ylab = "variance of bayes factors", xlab = "iterations (x999)")
joepie[20]
fit <- blim(dist~speed+I(speed^2), cars, iter = 999999)
fit2 <- blim(dist~speed, cars, iter = 999999)
aha <- numeric(2000)
for (i in 1:2000){
h1 <- fit
h1$trace <- h1$trace[sample(999999,2000,replace = T),]
h2 <- fit
h2$trace <- h2$trace[sample(999999,2000,replace = T),]
aha[i]<-exp(LMml(h2)-LMml(h1))
}
nrow(h1$trace)
aha <- numeric(2000)
for (i in 1:2000){
h1 <- fit
h1$trace <- h1$trace[sample(999948,2000,replace = T),]
h2 <- fit
h2$trace <- h2$trace[sample(999948,2000,replace = T),]
aha[i]<-exp(LMml(h2)-LMml(h1))
}
hist(aha, breaks = "FD")
aha <- numeric(2000)
for (i in 1:2000){
h1 <- fit
h1$trace <- h1$trace[sample(999948,4000,replace = T),]
h2 <- fit
h2$trace <- h2$trace[sample(999948,4000,replace = T),]
aha[i]<-exp(LMml(h2)-LMml(h1))
}
hist(aha, breaks = "FD")
mean(aha)
aha <- numeric(2000)
for (i in 1:2000){
h1 <- fit
h1$trace <- h1$trace[sample(999948,9999,replace = T),]
h2 <- fit
h2$trace <- h2$trace[sample(999948,9999,replace = T),]
aha[i]<-exp(LMml(h2)-LMml(h1))
}
hist(aha, breaks = "FD")
mean(aha)
aha <- numeric(2000)
for (i in 1:2000){
h1 <- fit
h1$trace <- h1$trace[sample(999948,99999,replace = T),]
h2 <- fit
h2$trace <- h2$trace[sample(999948,99999,replace = T),]
aha[i]<-exp(LMml(h2)-LMml(h1))
}
hist(aha, breaks = "FD")
mean(aha)
sample(100)
sample(100, replace = T)
BF <- 12
names(BF)
names(BF) <- "Bayes"
BF
quantile(aha,probs = c(0.025, 0.975))
BF <- function(blimfit1, blimfit2, bootstrap = F, plot = F){
if (class(blimfit1) != "blimfit" ||
class(blimfit2) != "blimfit") stop("Please enter a blimfit object!")
if (bootstrap == F){
BF <- exp(LMml(blimfit1)-LMml(blimfit2))
names(BF) <- "BayesFactor"
} else {
BFs <- numeric(1000)
for (i in 1:1000){
h1 <- blimfit1
h1$trace <- h1$trace[sample(nrow(h1$trace),replace = T),]
h2 <- blimfit2
h2$trace <- h2$trace[sample(nrow(h2$trace),replace = T),]
BFs[i]<-exp(LMml(h2)-LMml(h1))
}
BF <- c(mean(BFs),quantile(BFs, probs = c(0.025, 0.975)))
names(BF)[1] <- "BayesFactor"
if (plot == T){
hist(BFs, breaks = "FD", col = "light green", border = "light green",
main = "Bootstrap Distribution of Bayes Factor",
xlab = "Bayes Factor")
}
}
}
BF(h1,h2)
BF <- function(blimfit1, blimfit2, bootstrap = F, plot = F){
if (class(blimfit1) != "blimfit" ||
class(blimfit2) != "blimfit") stop("Please enter a blimfit object!")
if (bootstrap == F){
BF <- exp(LMml(blimfit1)-LMml(blimfit2))
names(BF) <- "BayesFactor"
} else {
BFs <- numeric(1000)
for (i in 1:1000){
h1 <- blimfit1
h1$trace <- h1$trace[sample(nrow(h1$trace),replace = T),]
h2 <- blimfit2
h2$trace <- h2$trace[sample(nrow(h2$trace),replace = T),]
BFs[i]<-exp(LMml(h2)-LMml(h1))
}
BF <- c(mean(BFs),quantile(BFs, probs = c(0.025, 0.975)))
names(BF)[1] <- "BayesFactor"
if (plot == T){
hist(BFs, breaks = "FD", col = "light green", border = "light green",
main = "Bootstrap Distribution of Bayes Factor",
xlab = "Bayes Factor")
}
}
return(BF)
}
BF <- function(blimfit1, blimfit2, bootstrap = F, plot = F){
if (class(blimfit1) != "blimfit" ||
class(blimfit2) != "blimfit") stop("Please enter a blimfit object!")
if (bootstrap == F){
BF <- exp(LMml(blimfit1)-LMml(blimfit2))
names(BF) <- "BayesFactor"
} else {
BFs <- numeric(1000)
for (i in 1:1000){
h1 <- blimfit1
h1$trace <- h1$trace[sample(nrow(h1$trace),replace = T),]
h2 <- blimfit2
h2$trace <- h2$trace[sample(nrow(h2$trace),replace = T),]
BFs[i]<-exp(LMml(h2)-LMml(h1))
}
BF <- c(mean(BFs),quantile(BFs, probs = c(0.025, 0.975)))
names(BF)[1] <- "BayesFactor"
if (plot == T){
hist(BFs, breaks = "FD", col = "light green", border = "light green",
main = "Bootstrap Distribution of Bayes Factor",
xlab = "Bayes Factor")
}
}
return(BF)
}
BF(h1,h2)
BF(h1,h2)
BF(h1,h2)
BF(h1,h2, bootstrap = T, plot = T)
BF <- function(blimfit1, blimfit2, bootstrap = F, plot = F){
# Function to calculate the Bayes Factor of two (nested) models
if (class(blimfit1) != "blimfit" ||
class(blimfit2) != "blimfit") stop("Please enter a blimfit object!")
if (bootstrap == F){
BF <- exp(lmml(blimfit1)-lmml(blimfit2))
names(BF) <- "BayesFactor m1/m2"
} else {
cat("Warning! Bootstrap Bayes Factor can take a while.")
BFs <- numeric(1000)
for (i in 1:1000){
h1 <- blimfit1
h1$trace <- h1$trace[sample(nrow(h1$trace),replace = T),]
h2 <- blimfit2
h2$trace <- h2$trace[sample(nrow(h2$trace),replace = T),]
BFs[i]<-exp(lmml(h1)-lmml(h2))
}
BF <- c(mean(BFs),quantile(BFs, probs = c(0.025, 0.975)))
names(BF)[1] <- "BayesFactor m1/m2"
if (plot == T){
hist(BFs, breaks = "FD", col = "light green", border = "light green",
main = "Bootstrap Distribution of Bayes Factor",
xlab = "Bayes Factor")
}
}
return(BF)
}
BF(h1,h2)
lmml <- function(blimfit){
# Laplace - Metropolis Marginal Likelihood using median approximation
# Markov Chain Monte Carlo in Practice by Gilks, Richardson & Spiegelhalter
# Page 186
# Check if object has class blimfit
if (class(blimfit) != "blimfit") stop("Please enter a blimfit object!")
# Create log(P(Data | theta))
llik <- function(theta,X,y){
sum(log(dnorm(y,X%*%theta[-1],theta[1])))
}
# Create log(P(theta | Model))
count <- 0
h <- c("","")
for (i in strsplit(blimfit$priors, "(", fixed = T)){
count <- count+1
if (count == 1){
h[count]<- paste(append(i, paste("(1/theta[",count,"],",sep = ""),
after = 1), collapse = "")
} else {
h[count]<- paste(append(i, paste("(theta[",count,"],",sep = ""),
after = 1), collapse = "")
}
}
lpriorstring <- paste(paste("log(",h,")", sep = ""),collapse = " + ")
lprior <- function(theta)eval(parse(text = lpriorstring))
# get the medians (computationally cheap alternative to multivariate mode)
medians <- apply(blimfit$trace[,-ncol(blimfit$trace)],2,median)
# trace covmat is an unbiased estimate of the inverse hessian
covmat <- cov(blimfit$trace[,-ncol(blimfit$trace)])
logdet <- log(det(covmat))
hmax <- llik(medians,blimfit$X,blimfit$y)+lprior(medians)
return(unname(hmax+0.5*length(medians)*log(2*pi)+0.5*logdet))
}
BF(h1,h2)
BF(h2,h1)
?"blim"
DIC(h1)
DIC(h2)
rm(fit,fit2,h1,h2,i,j,joepie,aga)
rm(aha)
cplots(m1)
aplots(m1)
summary(m1)
# Model 2 has one covariate with a cauchy prior
m2 <- blim(bwt~0+smoke+ht+ui+age, birthwt, iter = 99999,
prior_b = c("dnorm(2946.89039039039,388400.532757457)",
"dnorm(2946.89039039039,388400.532757457)",
"dnorm(2946.89039039039,388400.532757457)",
"dcauchy(0,sqrt(2)/2)"),
method = "rmhs", dtuning = T)
# check convergence and autocorr
cplots(m2)
aplots(m2)
# Model 3 has two covariates
m3 <- blim(bwt~0+smoke+ht+ui+age+lwt, birthwt, iter = 99999,
prior_b = c("dnorm(2946.89039039039,388400.532757457)",
"dnorm(2946.89039039039,388400.532757457)",
"dnorm(2946.89039039039,388400.532757457)",
"dcauchy(0,sqrt(2)/2)", "dcauchy(0,sqrt(2)/2)"),
method = "rmhs", dtuning = T)
# check convergence and autocorr
cplots(m3)
aplots(m3)
# model selection
BF(m1, m2, bootstrap = T, plot = T)
BF(m2, m3, bootstrap = T, plot = T)
BF(m1, m3, bootstrap = T, plot = T)
m2 <- blim(bwt~0+smoke+ht+ui+age, birthwt, iter = 99999,
prior_b = c("dnorm(2946.89039039039,388400.532757457)",
"dnorm(2946.89039039039,388400.532757457)",
"dnorm(2946.89039039039,388400.532757457)",
"dcauchy(0,sqrt(2)/2)"),
method = "rmhs", dtuning = T)
sqrt(2)/2
m2 <- blim(bwt~0+smoke+ht+ui+age, birthwt, iter = 99999,
prior_b = c("dnorm(2946.89039039039,388400.532757457)",
"dnorm(2946.89039039039,388400.532757457)",
"dnorm(2946.89039039039,388400.532757457)",
"dcauchy(0,0.7071068)"),
method = "rmhs", dtuning = T)
# check convergence and autocorr
cplots(m2)
aplots(m2)
# Model 3 has two covariates
m3 <- blim(bwt~0+smoke+ht+ui+age+lwt, birthwt, iter = 99999,
prior_b = c("dnorm(2946.89039039039,388400.532757457)",
"dnorm(2946.89039039039,388400.532757457)",
"dnorm(2946.89039039039,388400.532757457)",
"dcauchy(0,0.7071068)", "dcauchy(0,0.7071068)"),
method = "rmhs", dtuning = T)
# check convergence and autocorr
cplots(m3)
aplots(m3)
# model selection
BF(m1, m2, bootstrap = T, plot = T)
BF(m2, m3, bootstrap = T, plot = T)
BF(m1, m3, bootstrap = T, plot = T)
aplots(catrmhs)
aplots(m3)
plot(m3$auto)
BF(m1, m2)
BF(m2, m3)
BF(m1, m3)
BF(m3, m1)
BF(m3, m2)
DIC(m1)
DIC(m2)
DIC(m3)
cplots(m1)
plot(m2$auto)
par(mfrow = c(1,1), mar = margins)
par(mar=c(5.1,4.1,4.1,2.1)
mfrow = c(1,1))
par(mar=c(5.1,4.1,4.1,2.1), mfrow = c(1,1)
)
plot(m1$auto)
cplots(m1)
plot(m1$auto)
aplots(m1)
plot(m1$auto)
aplots(m2)
aplots(m3)
# let's make model 1 without covariates and look at burnin. Use exact same
# method as we will use later for optimal comparison
m1 <- blim(bwt~smoke+ht+ui, birthwt, iter = 99999,
prior_b = c("dnorm(2946.89039039039,388400.532757457)",
"dnorm(2946.89039039039,388400.532757457)",
"dnorm(2946.89039039039,388400.532757457)"),
method = "rmhs", dtuning = T)
cplots(m1)
m1 <- blim(bwt~smoke+ht+ui, birthwt, iter = 99999,
prior_b = c("dnorm(2946.89039039039,388400.532757457)",
"dnorm(0,3000)","dnorm(0,3000)","dnorm(0,3000)"),
method = "rmhs", dtuning = T)
cplots(m1)
plot(m2$auto)
aplots(m1)
ICBF(m1, model = "par[2] < par[4] < par[3]")
ICBF(m1, model = "par[2] < par[4] $$ par[4] < par[3]")
ICBF(m1, model = "par[2] < par[4] && par[4] < par[3]")
ICBF(m1, model = "par[2] < par[4] && par[3] < par[2]")
ICBF(m1, model = "par[2] > par[4] && par[3] < par[2]")
ICBF(m1, model = "par[2] > par[3] && par[3] > par[4]")
?subset
subset(airquality, Temp > 80, select = c(Ozone, Temp))
?GDP
??GDP
datasheet <- UN
require(car)
datasheet <- UN
subset(datasheet,GDP>5000)
subset(datasheet,subset = GDP>5000)
subset(datasheet,subset = GDP > 5000)
subset(datasheet, gdp > 5000)
rm(datasheet)
BF(m1, m2)
BF(m2, m3)
hoi <- function(x,y,z)match.call()
hoi(m1,m3, m2)
hoi <- function(x,y,z)match.arg()
hoi(m1,m3, m2)
hoi <- function(x,y,z)match.arg(arg = c(x))
hoi(m1,m3, m2)
hoi <- function(x,y,z)match.arg(arg = "x")
hoi(m1,m3, m2)
hoi <- function(x,y,z)sys.call()
hoi(m1,m3, m2)
hoi <- function(x,y,z)as.list(sys.call())
hoi(m1,m3, m2)
hoi <- function(x,y,z)paste("Bayes Factor",as.list(sys.call())[[2]],"/",as.list(sys.call())[[3]],sep = "")
hoi(m1,m3, m2)
hoi <- function(x,y,z)paste("Bayes Factor ",as.list(sys.call())[[2]],"/",as.list(sys.call())[[3]],sep = "")
hoi(m1,m3, m2)
BF <- function(blimfit1, blimfit2, bootstrap = F, plot = F){
# Function to calculate the Bayes Factor of two (nested) models
# Not much more than a wrapper around the lmml function!
# use bootstrap to see if you need more iterations for accurate estimation
# of the bayes factor
# Check if object has class blimfit
if (class(blimfit1) != "blimfit" ||
class(blimfit2) != "blimfit") stop("Please enter a blimfit object!")
if (bootstrap == F){
# Calculate bayes factor. remember: lmml returns log marginal likelihood!
BF <- exp(lmml(blimfit1)-lmml(blimfit2))
names(BF) <- paste("Bayes Factor ",
as.list(sys.call())[[2]],"/",
as.list(sys.call())[[3]],sep = "")
} else {
cat("Warning! Bootstrap Bayes Factor can take a while. \n")
# Initialise output vector
BFs <- numeric(1000)
# Start bootstrap procedure
for (i in 1:1000){
h1 <- blimfit1
h1$trace <- h1$trace[sample(nrow(h1$trace),replace = T),]
h2 <- blimfit2
h2$trace <- h2$trace[sample(nrow(h2$trace),replace = T),]
BFs[i]<-exp(lmml(h1)-lmml(h2))
}
# Output estimate and 95% interval
BF <- c(mean(BFs),quantile(BFs, probs = c(0.025, 0.975)))
names(BF)[1] <- paste("BayesFactor ",
as.list(sys.call())[[2]],"/",
as.list(sys.call())[[3]],sep = "")
# Plot the bootstrap distribution
if (plot == T){
hist(BFs, breaks = "FD", col = "light green", border = "light green",
main = "Bootstrap Distribution of Bayes Factor",
xlab = "Bayes Factor")
}
}
return(BF)
}
BF(m1,m3)
BF(m1,m3)
BF(m1,m2)
BF(m3,m2)
BF(m3,m3)
BF(m2,m3)
BF(m3,m1)
BF(m1)
BF(m1,m1)
BF(m1,m2)
BF(m1,m3)
summary(m3)
summary(m1)
ICBF(m1, model = "par[2] > par[3] && par[3] > par[4]")
curve(dnorm(x), xlim = c(-3,3))
par(mfrow = c(1,1))
curve(dnorm(x), xlim = c(-3,3))
abline(v=1.96)
abline(i.96-0.5)
abline(v=i.96-0.5)
abline(v= (i.96-0.5))
abline(v= (1.96-0.5))
abline(v= -(1.96-0.5))
plot(dbinom(1:27,1,prob = 0.144), type = "l", xlim = c(0,10))
plot(dbinom(1:27,1,prob = 0.0576), type = "l", xlim = c(0,10))
plot(dbinom(1:27,1,prob = 0.144), type = "l", xlim = c(0,10))
plot(dbinom(1:27,1,prob = 0.0576), type = "l", xlim = c(0,10), ylim = c(0,1))
plot(dbinom(1:27,1,prob = 0.144), type = "l", xlim = c(0,10), ylim = c(0,1))
plot(dbinom(0:27,1,prob = 0.144), type = "l", xlim = c(0,10), ylim = c(0,1))
par(new = T)
plot(dbinom(0:27,1,prob = 0.0576), type = "l", xlim = c(0,10), ylim = c(0,1))
?blim
library(blim)
fit <- blim(dist~speed, cars)
cplots(fit)
ICBF(fit, "par[1] < 0")
ICBF(fit, "par[1] < 0", T)
cplots(m1)
cplots(m2)
cplots(m3)
BF(m2,m3,bootstrap = T,plot = T)
m2 <- blim(bwt~smoke+ht+ui+age, birthwt)
m2 <- blim(bwt~smoke+ht+ui+age, data = birthwt)
library(MASS)
m2 <- blim(bwt~smoke+ht+ui+age, data = birthwt)
m1 <- blim(bwt~smoke+ht+ui, data = birthwt)
BF(m1,m2, bootstrap = T, plot = T)
m3 <- blim(bwt~smoke+ht+ui+lwt, data = birthwt)
BF(m1,m3, bootstrap = T, plot = T)
m3 <- blim(bwt~smoke+ht+ui+lwt, data = birthwt, iter = 99999)
m2 <- blim(bwt~smoke+ht+ui, data = birthwt, iter = 99999)
m1 <- blim(bwt~smoke+ht+ui, data = birthwt, iter = 99999)
BF(m1,m3, bootstrap = T, plot = T)
